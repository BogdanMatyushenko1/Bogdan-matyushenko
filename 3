import numpy as np

import numdifftools as nd



f = lambda x:3*x**4 - 4*x**3 - x**2 - 2*x - 5



def find_segments():

    search_range = np.arange(-10, 10, 1)



    a = None

    previous_x = None

    current_x  = None

    segments = []



    for x in search_range:

        x = round(x,4 )

        current_x = f(x)

        if previous_x != None and previous_x * current_x < 0:

            segments.append((a, x))

        a = x

        previous_x = current_x

    return segments



segments = find_segments()

for a, b in segments:

    print(f'Found segment:  [{a}, {b}]')




def nuton(a, b, eps, f):

    df2 = nd.Derivative(f, n=2)(b)

    if f(b) * df2 > 0:

        xi = b

    else:

        xi = a

    df = nd.Derivative(f, n=1)(xi)

    xi_1 = xi - f(xi) / df

    while abs(xi_1 - xi) > eps:

        xi = xi_1

        xi_1 = xi - f(xi) / df

    print('Метод Ньютона, x = ', xi_1.round(4))



def komb(a, b, eps, f):

    if nd.Derivative(f, n=1)(a) * nd.Derivative(f, n=2)(a) > 0:

        a0 = a

        b0 = b

    else:

        a0 = b

        b0 = a

    ai = a0

    bi = b0

    while abs(ai - bi) > eps:

        ai_1 = ai - f(ai) * (bi - ai) / (f(bi) - f(ai))

        bi_1 = bi - f(bi) / nd.Derivative(f, n=1)(bi)

        ai = ai_1

        bi = bi_1

    x = (ai_1 + bi_1) / 2



    print('Комбінований метод, x = ', x.round(4))



if __name__ == "__main__":

    a1, b1 = -3, -2

    a2, b2 = 0, 1

    eps = 0.001



    print("Розв'язки на відрізку [-3, -2]")

    nuton(a1, b1, eps, f)

    komb(a1, b1, eps, f)

    print("\n Розв'язки на відрізку [0, 1]")

    nuton(a2, b2, eps, f)

    komb(a2, b2, eps, f)
